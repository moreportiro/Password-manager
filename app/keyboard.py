from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from app.database.requests import get_passwords
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
main_inline = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîê –ú–æ–∏ –ø–∞—Ä–æ–ª–∏',
                          callback_data='show_passwords')],
    [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='add_password'),
     InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='delete_password')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
replace_confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å",
                          callback_data="confirm_replace_new")],
    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                          callback_data="cancel_action")]
])


async def passwords(user_id):
    try:
        all_passwords = await get_passwords(user_id)
        keyboard = InlineKeyboardBuilder()

        if all_passwords:
            for password in all_passwords:
                keyboard.add(InlineKeyboardButton(
                    text=f"üåê {password.site}",
                    callback_data=f"password_{password.id}"
                ))
        else:
            keyboard.add(InlineKeyboardButton(
                text="üì≠ –ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π",
                callback_data="no_passwords"
            ))

        keyboard.add(InlineKeyboardButton(
            text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
            callback_data='to_main'
        ))
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        print(f"Error in passwords(): {e}")
        error_keyboard = InlineKeyboardBuilder()
        error_keyboard.add(InlineKeyboardButton(
            text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            callback_data="error"
        ))
        error_keyboard.add(InlineKeyboardButton(
            text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
            callback_data='to_main'
        ))
        return error_keyboard.adjust(1).as_markup()


async def delete_passwords_keyboard(user_id):
    try:
        all_passwords = await get_passwords(user_id)
        keyboard = InlineKeyboardBuilder()

        if all_passwords:
            for password in all_passwords:
                keyboard.add(InlineKeyboardButton(
                    text=f"üóëÔ∏è {password.site}",
                    callback_data=f"delete_{password.id}"
                ))
        else:
            keyboard.add(InlineKeyboardButton(
                text="üì≠ –ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                callback_data="no_passwords_to_delete"
            ))

        keyboard.add(InlineKeyboardButton(
            text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
            callback_data='to_main'
        ))
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        print(f"Error in delete_passwords_keyboard(): {e}")
        error_keyboard = InlineKeyboardBuilder()
        error_keyboard.add(InlineKeyboardButton(
            text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            callback_data="error"
        ))
        error_keyboard.add(InlineKeyboardButton(
            text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
            callback_data='to_main'
        ))
        return error_keyboard.adjust(1).as_markup()
