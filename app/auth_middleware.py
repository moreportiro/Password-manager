from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import app.database.requests as rq
import app.keyboard as kb
from app.auth_manager import auth_manager


class AuthMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
    """

    # –°–ø–∏—Å–æ–∫ callback_data, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    PROTECTED_CALLBACKS = {
        'show_passwords',
        'add_password',
        'delete_password',
    }

    # Callback_data, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    PROTECTED_PREFIXES = {
        'password_',
        'delete_',
        'replace_',
    }

    # –°–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    PROTECTED_STATES = {
        'AddPassword',
        'ReplacePassword',
    }

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        needs_auth = False

        if isinstance(event, CallbackQuery):
            callback_data = event.data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ callback_data
            if callback_data in self.PROTECTED_CALLBACKS:
                needs_auth = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            for prefix in self.PROTECTED_PREFIXES:
                if callback_data.startswith(prefix):
                    needs_auth = True
                    break

        elif isinstance(event, Message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: FSMContext = data.get('state')
            if state:
                current_state = await state.get_state()
                if current_state:
                    state_group = current_state.split(':')[0]
                    if state_group in self.PROTECTED_STATES:
                        needs_auth = True

        # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if not needs_auth:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        tg_id = event.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
        has_master = await rq.has_master_password(tg_id)

        if not has_master:
            # –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç—Ä–µ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if isinstance(event, CallbackQuery):
                await event.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", show_alert=True)
                state = data['state']
                await event.message.edit_text(
                    "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è</b>\n"
                    "–î–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.\n\n"
                    "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—é:</b>\n"
                    "‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                    "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n"
                    "‚Ä¢ –†–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ (–µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                    "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å! –ü—Ä–∏ –µ–≥–æ —É—Ç–µ—Ä–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:",
                    reply_markup=kb.cancel_kb,
                    parse_mode='HTML'
                )
                await state.set_state('MasterPassword:setup_new')
                return

        # –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not auth_manager.is_authenticated(tg_id):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ–º –≤–≤–æ–¥–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
            if isinstance(event, CallbackQuery):
                await event.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å", show_alert=True)
                state = data['state']
                await event.message.edit_text(
                    "üîê <b>–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å\n</b>"
                    "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∑–∞—â–∏—â–∞–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n"
                    "–ë–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º.\n",
                    reply_markup=kb.cancel_with_reset_kb,
                    parse_mode='HTML'
                )
                await state.set_state('MasterPassword:enter_existing')
                return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return await handler(event, data)
