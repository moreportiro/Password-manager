from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import app.keyboard as kb
import app.database.requests as rq
from app.validators import validate_site, validate_login, validate_password
from app.handlers.states import AddPassword
from app.password_generator import generate_yandex_like_password, safe_display_password

router = Router()


@router.callback_query(F.data == "add_password")
async def add_password_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞:",
        reply_markup=kb.cancel_kb
    )
    await state.set_state(AddPassword.site)
    await callback.answer()


@router.message(AddPassword.site)
async def add_site(message: Message, state: FSMContext):
    if await validate_site(message, state):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email:",
            reply_markup=kb.cancel_kb
        )
        await state.set_state(AddPassword.login)


@router.message(AddPassword.login)
async def add_login(message: Message, state: FSMContext):
    if await validate_login(message, state):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ:",
            reply_markup=kb.generate_password_kb
        )
        await state.set_state(AddPassword.password)


@router.callback_query(F.data == "generate_password", AddPassword.password)
async def generate_password_handler(callback: CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å
    generated_password = generate_yandex_like_password()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(generated_password=generated_password)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–æ–ª—å
    password_display = safe_display_password(generated_password)

    await callback.message.edit_text(
        f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password_display}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        parse_mode='HTML',
        reply_markup=kb.confirm_generated_password_kb
    )
    await callback.answer()


@router.callback_query(F.data == "use_generated_password", AddPassword.password)
async def use_generated_password(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID
    user = await rq.set_user(callback.from_user.id)
    data = await state.get_data()
    generated_password = data.get('generated_password', '')

    if generated_password:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = await rq.add_password(user.id, data['site'], data['login'], generated_password)

        if success:
            await callback.message.edit_text(
                f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è."
            )
    else:
        await callback.answer("‚ùå –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")

    await state.clear()
    await callback.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=kb.main_inline
    )


@router.callback_query(F.data == "generate_another_password", AddPassword.password)
async def generate_another_password(callback: CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    generated_password = generate_yandex_like_password()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(generated_password=generated_password)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–æ–ª—å
    password_display = safe_display_password(generated_password)

    await callback.message.edit_text(
        f"üîê –ù–æ–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password_display}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        parse_mode='HTML',
        reply_markup=kb.confirm_generated_password_kb
    )
    await callback.answer()


@router.callback_query(F.data == "enter_own_password", AddPassword.password)
async def enter_own_password(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        reply_markup=kb.cancel_kb
    )
    await state.set_state(AddPassword.password)
    await callback.answer()


@router.message(AddPassword.password)
async def add_password_final(message: Message, state: FSMContext):
    if await validate_password(message, state):
        data = await state.get_data()

        user = await rq.set_user(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
        if await rq.check_password_exists(user.id, data['site']):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω—ã
            await state.update_data(
                site=data['site'],
                login=data['login'],
                password=message.text
            )

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã
            await message.answer(
                f"‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", callback_data="confirm_replace_new")],
                    [InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
                ])
            )
            return

        # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
        await rq.add_password(user.id, data['site'], data['login'], message.text)
        await state.clear()

        await message.answer(
            f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode='HTML',
            reply_markup=kb.main_inline
        )
