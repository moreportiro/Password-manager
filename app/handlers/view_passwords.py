from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import app.keyboard as kb
import app.database.requests as rq

router = Router()


@router.callback_query(F.data == 'show_passwords')
async def show_passwords(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        'üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏:',
        reply_markup=await kb.passwords(user.id)
    )


@router.callback_query(F.data.startswith('password_'))
async def password(callback: CallbackQuery):
    try:
        password_id = int(callback.data.split('_')[1])
        password_obj = await rq.get_password_by_id(password_id)

        if password_obj:
            await callback.message.edit_text(
                f"üîê –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{password_obj.site}</b>:\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: <b>{password_obj.login}</b>\n"
                f"üîë –ü–∞—Ä–æ–ª—å: <b>{password_obj.password}</b>\n\n"
                f"‚ö†Ô∏è –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–∏ —Å –∫–µ–º!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"start_replace_{password_obj.id}")],
                    [InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_passwords")],
                    [InlineKeyboardButton(
                        text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="to_main")]
                ])
            )
            await callback.answer()
        else:
            await callback.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        print(f"Error showing password: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è", show_alert=True)


@router.callback_query(F.data == "back_to_passwords")
async def back_to_passwords(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        "üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏:",
        reply_markup=await kb.passwords(user.id)
    )


@router.callback_query(F.data == "to_main")
async def to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_inline
    )


@router.callback_query(F.data == "no_passwords")
async def no_passwords(callback: CallbackQuery):
    await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π", show_alert=True)
