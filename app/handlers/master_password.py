from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

import app.keyboard as kb
import app.database.requests as rq
from app.crypto import cipher
from app.auth_manager import auth_manager
from app.validators import validate_master_password
from app.migration_utils import migrate_user_passwords_to_master_password, get_migration_info
from .states import MasterPassword

router = Router()


async def require_master_password(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    await callback.message.edit_text(
        "üîê <b>–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å</b>\n"
        "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∑–∞—â–∏—â–∞–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n"
        "–ë–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º.",
        reply_markup=kb.cancel_kb,
        parse_mode='HTML'
    )
    return MasterPassword.enter_existing


async def require_master_password_setup(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    await callback.message.edit_text(
        "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è</b>\n"
        "–î–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—é:</b>\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ (–µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å! –ü—Ä–∏ –µ–≥–æ —É—Ç–µ—Ä–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:",
        reply_markup=kb.cancel_kb,
        parse_mode='HTML'
    )
    return MasterPassword.setup_new


@router.message(StateFilter(MasterPassword.setup_new))
async def process_master_password_setup(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    master_password = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
    is_valid, validation_message = await validate_master_password(master_password)

    if not is_valid:
        await message.answer(
            f"{validation_message}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=kb.cancel_kb
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(master_password=master_password)
    await state.set_state(MasterPassword.setup_confirm)

    await message.answer(
        f"{validation_message}"
        "üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=kb.cancel_kb,
        parse_mode='HTML'
    )


@router.message(StateFilter(MasterPassword.setup_confirm))
async def process_master_password_confirm(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    confirmation_password = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    data = await state.get_data()
    original_password = data.get('master_password')

    if confirmation_password != original_password:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            reply_markup=kb.cancel_kb
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    user = await rq.get_user_by_tg_id(message.from_user.id)
    migration_info = await get_migration_info(message.from_user.id)

    # –•–µ—à–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
    password_hash = cipher.hash_master_password(original_password)
    success = await rq.set_master_password(message.from_user.id, password_hash)

    if success:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_manager.authenticate_user(message.from_user.id, original_password)
        success_message = "‚úÖ <b>–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n"

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë
        if migration_info['needs_migration']:
            try:
                migrated_count = await migrate_user_passwords_to_master_password(
                    user.id, message.from_user.id, original_password
                )
                success_message += f"üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –ø–∞—Ä–æ–ª–µ–π –∫ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."
            except Exception as e:
                print(
                    f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
                success_message += "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–æ–ª–∏ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞."

        success_message += "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏ –∑–∞—â–∏—â–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await state.clear()
        await message.answer(
            success_message,
            reply_markup=kb.main_inline,
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=kb.main_inline
        )
        await state.clear()


@router.message(StateFilter(MasterPassword.enter_existing))
async def process_master_password_enter(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    master_password = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
    user = await rq.get_user_by_tg_id(message.from_user.id)
    if not user or not user.master_password_hash:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.",
            reply_markup=kb.main_inline
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if cipher.verify_master_password(master_password, user.master_password_hash):
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_manager.authenticate_user(message.from_user.id, master_password)

        await state.clear()
        await message.answer(
            "‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n</b>"
            "–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.main_inline,
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!\n</b>"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
            "üîÑ –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_master_password –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=kb.cancel_kb,
            parse_mode='HTML'
        )


@router.callback_query(F.data == "reset_master_password")
async def process_reset_master_password(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!\n\n</b>"
        "–°–±—Ä–æ—Å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ <b>–ü–û–õ–ù–û–ú–£ –£–î–ê–õ–ï–ù–ò–Æ</b> –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–ù–ï–û–ë–†–ê–¢–ò–ú–û</b>.\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –°–ë–†–û–°</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=kb.cancel_kb,
        parse_mode='HTML'
    )
    await state.set_state(MasterPassword.reset_confirm)


@router.message(StateFilter(MasterPassword.reset_confirm))
async def process_reset_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    if message.text == "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –°–ë–†–û–°":
        success = await rq.reset_user_data(message.from_user.id)

        if success:
            await state.clear()
            await message.answer(
                "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
                "–í—Å–µ –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏ –∏ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω—ã.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.main_inline,
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=kb.main_inline
            )
            await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ: <code>–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –°–ë–†–û–°</code>",
            reply_markup=kb.cancel_kb,
            parse_mode='HTML'
        )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
@router.message(F.text == "/reset_master_password")
async def cmd_reset_master_password(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è"""
    await state.clear()
    await process_reset_master_password(CallbackQuery(
        id="cmd",
        from_user=message.from_user,
        message=message,
        data="reset_master_password"
    ), state)
