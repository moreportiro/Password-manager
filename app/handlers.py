from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import app.keyboard as kb
import app.database.requests as rq
from app.validators import validate_site, validate_login, validate_password

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è


class AddPassword(StatesGroup):
    site = State()
    login = State()
    password = State()


class ReplacePassword(StatesGroup):
    confirmation = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(
        'üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=kb.main_inline
    )


@router.callback_query(F.data == 'show_passwords')
async def show_passwords(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        'üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏:',
        reply_markup=await kb.passwords(user.id)
    )


@router.callback_query(F.data.startswith('password_'))
async def password(callback: CallbackQuery):
    try:
        password_id = int(callback.data.split('_')[1])
        password_obj = await rq.get_password_by_id(password_id)

        if password_obj:
            await callback.message.edit_text(
                f"üîê –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{password_obj.site}</b>:\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: <b>{password_obj.login}</b>\n"
                f"üîë –ü–∞—Ä–æ–ª—å: <b>{password_obj.password}</b>\n\n"
                f"‚ö†Ô∏è –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–∏ —Å –∫–µ–º!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_passwords")],
                    [InlineKeyboardButton(
                        text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="to_main")]
                ])
            )
            await callback.answer()
        else:
            await callback.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        print(f"Error showing password: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è", show_alert=True)


@router.callback_query(F.data == "back_to_passwords")
async def back_to_passwords(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        "üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏:",
        reply_markup=await kb.passwords(user.id)
    )


@router.callback_query(F.data == "to_main")
async def to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π [beta]\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_inline
    )


@router.callback_query(F.data == "no_passwords")
async def no_passwords(callback: CallbackQuery):
    await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π", show_alert=True)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - –Ω–∞—á–∞–ª–æ


@router.callback_query(F.data == "add_password")
async def add_password_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞:",
        reply_markup=kb.cancel_kb
    )
    await state.set_state(AddPassword.site)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã


@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=kb.main_inline
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∞–π—Ç–∞


@router.message(AddPassword.site)
async def add_site(message: Message, state: FSMContext):
    if await validate_site(message, state):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email:",
            reply_markup=kb.cancel_kb
        )
        await state.set_state(AddPassword.login)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞


@router.message(AddPassword.login)
async def add_login(message: Message, state: FSMContext):
    if await validate_login(message, state):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            reply_markup=kb.cancel_kb
        )
        await state.set_state(AddPassword.password)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ


@router.message(AddPassword.password)
async def add_password_final(message: Message, state: FSMContext):
    if await validate_password(message, state):
        data = await state.get_data()

        user = await rq.set_user(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
        if await rq.check_password_exists(user.id, data['site']):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω—ã
            await state.update_data(
                site=data['site'],
                login=data['login'],
                password=message.text
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã
            await state.set_state(ReplacePassword.confirmation)

            await message.answer(
                f"‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", callback_data="confirm_replace")],
                    [InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_replace")]
                ])
            )
            return

        # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
        await rq.add_password(user.id, data['site'], data['login'], data['password'])
        await state.clear()

        await message.answer(
            f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode='HTML',
            reply_markup=kb.main_inline
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è


@router.callback_query(F.data == "confirm_replace", ReplacePassword.confirmation)
async def confirm_replace_password(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user = await rq.set_user(callback.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å
        success = await rq.update_password(user.id, data['site'], data['login'], data['password'])

        if success:
            await callback.message.edit_text(
                f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è <b>{data['site']}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è."
            )

        await state.clear()
        await callback.answer()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.main_inline
        )
    except Exception as e:
        print(f"Error replacing password: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è


@router.callback_query(F.data == "cancel_replace", ReplacePassword.confirmation)
async def cancel_replace_password(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    await callback.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=kb.main_inline
    )

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è


@router.callback_query(F.data == "delete_password")
async def delete_password_start(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await kb.delete_passwords_keyboard(user.id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è


@router.callback_query(F.data.startswith('delete_'))
async def delete_password_confirm(callback: CallbackQuery):
    password_id = int(callback.data.split('_')[1])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                              callback_data=f"confirm_delete_{password_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                              callback_data="cancel_delete")]
    ])

    password_obj = await rq.get_password_by_id(password_id)
    if password_obj:
        await callback.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è <b>{password_obj.site}</b>?",
            parse_mode='HTML',
            reply_markup=confirm_kb
        )
    else:
        await callback.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è


@router.callback_query(F.data.startswith('confirm_delete_'))
async def delete_password_final(callback: CallbackQuery):
    password_id = int(callback.data.split('_')[2])
    success = await rq.delete_password(password_id)

    if success:
        user = await rq.set_user(callback.from_user.id)
        await callback.message.edit_text(
            "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=await kb.delete_passwords_keyboard(user.id)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è", show_alert=True)

    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    user = await rq.set_user(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await kb.delete_passwords_keyboard(user.id)
    )
    await callback.answer()


@router.callback_query(F.data == "no_passwords_to_delete")
async def no_passwords_to_delete(callback: CallbackQuery):
    await callback.answer("üì≠ –ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
